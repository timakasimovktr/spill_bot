const { Telegraf, Markup } = require("telegraf");
const path = require("path");

const bot = new Telegraf("8147782034:AAEeS1tXZxeR919ZECGl9aEI0-AOlQrTlM4");
const ADMIN_CHAT_ID = -4742476473;
const ADMIN_ID = 693825152;

const userStates = new Map();
const userProfiles = new Map();
const pendingReplies = new Map();

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
function formatDate() {
  const now = new Date();
  return now.toLocaleString("ru-RU", { timeZone: "Asia/Tashkent" });
}

// /start
bot.start(async (ctx) => {
  try {
    userStates.set(ctx.from.id, { step: "language" });

    await ctx.replyWithDocument({
      source: path.join(__dirname, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Smart Dunyo Pay.pdf"),
      filename: "Smart Dunyo Pay - Yo‚Äòriqnoma.pdf",
    });

    await ctx.reply(
      "Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
      Markup.keyboard([["üá∫üáø O'zbek tili", "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"]]).resize()
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ /start –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –í—ã–±–æ—Ä —è–∑—ã–∫–∞
bot.hears(["üá∫üáø O'zbek tili", "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"], async (ctx) => {
  try {
    const lang = ctx.message.text.includes("O'zbek") ? "uz" : "ru";
    const profile = userProfiles.get(ctx.from.id) || { questions: [] };
    userProfiles.set(ctx.from.id, { ...profile, lang });

    if (profile.name && profile.phone) {
      userStates.set(ctx.from.id, { step: "waiting_question" });
      await ctx.reply(
        lang === "uz"
          ? `Savolingizni yozing (ism: ${profile.name}, telefon: ${profile.phone}):`
          : `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–∏–º—è: ${profile.name}, —Ç–µ–ª–µ—Ñ–æ–Ω: ${profile.phone}):`,
        Markup.removeKeyboard()
      );
    } else {
      userStates.set(ctx.from.id, { step: profile.name ? "waiting_phone" : "waiting_name" });
      await ctx.reply(
        lang === "uz"
          ? (profile.name ? "Telefon raqamingizni yuboring:" : "Ismingizni yozing:")
          : (profile.name ? "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" : "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:"),
        profile.name
          ? Markup.keyboard([
              [
                Markup.button.contactRequest(
                  lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
                ),
              ],
            ])
              .resize()
              .oneTime()
          : Markup.removeKeyboard()
      );
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞ –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –ö–æ–Ω—Ç–∞–∫—Ç
bot.on("contact", async (ctx) => {
  try {
    const state = userStates.get(ctx.from.id);
    if (!state || state.step !== "waiting_phone") return;

    const profile = userProfiles.get(ctx.from.id);
    profile.phone = ctx.message.contact.phone_number;
    userProfiles.set(ctx.from.id, profile);
    userStates.set(ctx.from.id, { step: "waiting_question" });

    await ctx.reply(
      profile.lang === "uz"
        ? `Savolingizni yozing (ism: ${profile.name}, telefon: ${profile.phone}):`
        : `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–∏–º—è: ${profile.name}, —Ç–µ–ª–µ—Ñ–æ–Ω: ${profile.phone}):`,
      Markup.removeKeyboard()
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –¢–µ–∫—Å—Ç
bot.on("text", async (ctx) => {
  try {
    console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: "${ctx.message.text}" –æ—Ç ${ctx.from.id}`);
    let state = userStates.get(ctx.from.id);
    let profile = userProfiles.get(ctx.from.id) || { questions: [] };
    const text = ctx.message.text;

    // –ê–¥–º–∏–Ω –ø–∏—à–µ—Ç –æ—Ç–≤–µ—Ç
    if (pendingReplies.has(ctx.from.id)) {
      const { userId, lang, adminMsgId, questionIndex } = pendingReplies.get(ctx.from.id);

      if (text === "Yangi savol berish / –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å") {
        await ctx.reply(
          "‚ùó –≠—Ç–æ –∫–Ω–æ–ø–∫–∞, –∞ –Ω–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."
        );
        return;
      }

      const userProfile = userProfiles.get(userId);
      if (!userProfile || !userProfile.questions[questionIndex]) {
        await ctx.reply("‚ùó –í–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        pendingReplies.delete(ctx.from.id);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      const question = userProfile.questions[questionIndex];
      question.answers = question.answers || [];
      question.answers.push({ text, timestamp: formatDate() });
      userProfiles.set(userId, userProfile);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å–∞
      await ctx.telegram.sendMessage(
        userId,
        lang === "uz"
          ? `üì¨ Sizga javob (savol: ${question.question}):\n\n${text}`
          : `üì¨ –í–∞–º –æ—Ç–≤–µ—Ç–∏–ª–∏ (–≤–æ–ø—Ä–æ—Å: ${question.question}):\n\n${text}`
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ
      await updateAdminCard(userId, userProfile);

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      try {
        await ctx.telegram.deleteMessage(ctx.chat.id, adminMsgId);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${adminMsgId}:`, error);
      }

      await ctx.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ä—Ç–æ—á–∫—É.");
      pendingReplies.delete(ctx.from.id);
      return;
    }

    // –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    if (text === "Yangi savol berish / –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å") {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "Yangi savol berish" –¥–ª—è ${ctx.from.id}: state=${JSON.stringify(state)}, profile=${JSON.stringify(profile)}`);
      pendingReplies.delete(ctx.from.id);
      const lang = profile.lang || "uz";

      userProfiles.set(ctx.from.id, { ...profile, lang });

      if (profile.name && profile.phone) {
        userStates.set(ctx.from.id, { step: "waiting_question" });
        await ctx.reply(
          lang === "uz"
            ? `Yangi savolingizni yozing (ism: ${profile.name}, telefon: ${profile.phone}):`
            : `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å (–∏–º—è: ${profile.name}, —Ç–µ–ª–µ—Ñ–æ–Ω: ${profile.phone}):`,
          Markup.removeKeyboard()
        );
      } else {
        userStates.set(ctx.from.id, { step: profile.name ? "waiting_phone" : "waiting_name" });
        await ctx.reply(
          lang === "uz"
            ? (profile.name ? "Telefon raqamingizni yuboring:" : "Ismingizni yozing:")
            : (profile.name ? "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" : "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:"),
          profile.name
            ? Markup.keyboard([
                [
                  Markup.button.contactRequest(
                    lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
                  ),
                ],
              ])
                .resize()
                .oneTime()
            : Markup.removeKeyboard()
        );
      }
      return;
    }

    if (!state) return;

    const lang = profile.lang || "uz";

    // –í–æ–ø—Ä–æ—Å
    if (state.step === "waiting_question") {
      if (!text.trim() || text === "Yangi savol berish / –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å") {
        await ctx.reply(
          lang === "uz"
            ? "Iltimos, savolingizni matn ko'rinishida yozing."
            : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
        );
        return;
      }

      profile.questions.push({ question: text, answers: [], timestamp: formatDate() });
      userProfiles.set(ctx.from.id, profile);

      if (profile.name && profile.phone) {
        await handleCompleteProfile(ctx, profile, profile.questions.length - 1);
      } else {
        userStates.set(ctx.from.id, { step: profile.name ? "waiting_phone" : "waiting_name" });
        await ctx.reply(
          lang === "uz"
            ? (profile.name ? "Telefon raqamingizni yuboring:" : "Ismingizni yozing:")
            : (profile.name ? "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:" : "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:"),
          profile.name
            ? Markup.keyboard([
                [
                  Markup.button.contactRequest(
                    lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
                  ),
                ],
              ])
                .resize()
                .oneTime()
            : Markup.removeKeyboard()
        );
      }
    }
    // –ò–º—è
    else if (state.step === "waiting_name") {
      profile.name = text;
      userProfiles.set(ctx.from.id, profile);
      userStates.set(ctx.from.id, { step: "waiting_phone" });

      await ctx.reply(
        lang === "uz"
          ? "Telefon raqamingizni yuboring:"
          : "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        Markup.keyboard([
          [
            Markup.button.contactRequest(
              lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
            ),
          ],
        ])
          .resize()
          .oneTime()
      );
    }
    // –†—É—á–Ω–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    else if (state.step === "waiting_phone") {
      if (/^\+?\d{7,15}$/.test(text)) {
        profile.phone = text;
        userProfiles.set(ctx.from.id, profile);
        userStates.set(ctx.from.id, { step: "waiting_question" });

        await ctx.reply(
          lang === "uz"
            ? `Savolingizni yozing (ism: ${profile.name}, telefon: ${profile.phone}):`
            : `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–∏–º—è: ${profile.name}, —Ç–µ–ª–µ—Ñ–æ–Ω: ${profile.phone}):`,
          Markup.removeKeyboard()
        );
      } else {
        await ctx.reply(
          lang === "uz"
            ? "Iltimos, telefon raqamingizni to‚Äòg‚Äòri kiriting yoki pastdagi tugmadan foydalaning."
            : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        );
      }
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${ctx.from.id}:`, error);
    await ctx.reply(
      profile.lang === "uz"
        ? "‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring."
        : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
});

// –û—Ç–≤–µ—Ç –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
bot.on("callback_query", async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    console.log(`Callback query: ${data} –æ—Ç ${ctx.from.id}`);

    if (!data.startsWith("reply_")) return;

    const [_, userId, questionIndex] = data.split("_");
    const userIdNum = Number(userId);
    const questionIndexNum = Number(questionIndex);
    const profile = userProfiles.get(userIdNum);

    if (!profile || !profile.questions[questionIndexNum]) {
      await ctx.answerCbQuery("‚ùó –í–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    pendingReplies.set(ctx.from.id, {
      userId: userIdNum,
      lang: profile.lang,
      adminMsgId: ctx.message ? ctx.message.message_id : null,
      questionIndex: questionIndexNum,
    });

    await ctx.answerCbQuery();
    await ctx.reply(
      profile.lang === "uz"
        ? `‚úçÔ∏è Savolga javob yozing (savol: ${profile.questions[questionIndexNum].question}):`
        : `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–≤–æ–ø—Ä–æ—Å: ${profile.questions[questionIndexNum].question}):`
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query –æ—Ç ${ctx.from.id}:`, error);
    await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
  }
});

// –§—É–Ω–∫—Ü–∏—è: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ
async function updateAdminCard(userId, profile) {
  try {
    const { name, phone, lang, questions, adminMsgId } = profile;

    const questionsText = questions
      .slice(-10) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
      .map((q, index) => {
        const answersText = q.answers
          ? q.answers
              .slice(-5) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
              .map((a, aIndex) => `  ${aIndex + 1}. [${a.timestamp}] ${a.text}`)
              .join("\n")
          : "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤";
        return `
Savol #${index + 1} / –í–æ–ø—Ä–æ—Å #${index + 1} [${q.timestamp}]:
${q.question}
üì¨ Javoblar / –û—Ç–≤–µ—Ç—ã:
${answersText}`;
      })
      .join("\n\n");

    const groupMessage = `
üì© Foydalanuvchi / –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${name}
üìû Telefon: ${phone}

${questionsText}

#USER${userId}
    `;

    const buttons = questions.map((_, index) => [
      Markup.button.callback(
        lang === "uz" ? `üì© Savol #${index + 1} ga javob` : `üì© –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å #${index + 1}`,
        `reply_${userId}_${index}`
      ),
    ]);

    if (adminMsgId) {
      await bot.telegram.editMessageText(
        ADMIN_CHAT_ID,
        adminMsgId,
        null,
        groupMessage,
        Markup.inlineKeyboard(buttons)
      );
    } else {
      const sent = await bot.telegram.sendMessage(
        ADMIN_CHAT_ID,
        groupMessage,
        Markup.inlineKeyboard(buttons)
      );
      profile.adminMsgId = sent.message_id;
      userProfiles.set(userId, profile);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è ${userId}:`, error);
  }
}

// –§—É–Ω–∫—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
async function handleCompleteProfile(ctx, profile, questionIndex) {
  try {
    const { name, phone, lang, questions } = profile;
    const question = questions[questionIndex];

    if (!name || !phone || !question.question) {
      console.error(`–ù–µ–ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${ctx.from.id}:`, profile);
      await ctx.reply(
        lang === "uz"
          ? "‚ùå Ma'lumotlar to'liq emas. Iltimos, qaytadan urinib ko‚Äòring."
          : "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
      return;
    }

    await updateAdminCard(ctx.from.id, profile);

    userStates.delete(ctx.from.id);
    await ctx.reply(
      lang === "uz"
        ? "‚úÖ Rahmat! Savolingiz yuborildi. Tez orada siz bilan bog'lanamiz."
        : "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.",
      Markup.keyboard([["Yangi savol berish / –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"]]).resize()
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ handleCompleteProfile –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply(
      profile.lang === "uz"
        ? "‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko‚Äòring."
        : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
}

// –ó–∞–ø—É—Å–∫
bot.launch().then(() => console.log("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"));
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));