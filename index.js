const { Telegraf, Markup } = require("telegraf");
const path = require("path");

const bot = new Telegraf("8147782034:AAEeS1tXZxeR919ZECGl9aEI0-AOlQrTlM4");
const ADMIN_CHAT_ID = -4742476473;

const userStates = new Map();
const userProfiles = new Map();
const pendingReplies = new Map();

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
const formatDate = () =>
  new Date().toLocaleString("ru-RU", { timeZone: "Asia/Tashkent" });

// –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
const autoDeleteMessage = async (ctx, chatId, messageId, delay = 10000) => {
  try {
    setTimeout(() => {
      ctx.telegram.deleteMessage(chatId, messageId).catch((error) => {
        console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, error);
      });
    }, delay);
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`,
      error
    );
  }
};

// /start
// /start
// /start
bot.start(async (ctx) => {
  try {
    userStates.set(ctx.from.id, { step: "language" });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–¥–Ω–æ–º—É
    const images = [
      "1.png",
      "2.png",
      "3.png",
      "4.png",
      "5.png",
      "6.jpg",
      "7.jpg",
    ];
    for (const image of images) {
      await ctx.replyWithPhoto(
        { source: path.join(__dirname, image) },
        { disable_notification: true }
      );
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ PDF
    await ctx.replyWithDocument({
      source: path.join(__dirname, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Smart Dunyo Pay.pdf"),
      filename: "Smart Dunyo Pay - Yo‚Äòriqnoma.pdf",
    });

    await ctx.reply(
      "Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
      Markup.keyboard([["üá∫üáø O'zbek tili", "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"]]).resize()
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ /start –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –í—ã–±–æ—Ä —è–∑—ã–∫–∞
bot.hears(["üá∫üáø O'zbek tili", "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"], async (ctx) => {
  try {
    const lang = ctx.message.text.includes("O'zbek") ? "uz" : "ru";
    const profile = userProfiles.get(ctx.from.id) || { questions: [], lang };

    userProfiles.set(ctx.from.id, profile);
    userStates.set(ctx.from.id, {
      step: profile.name ? "waiting_phone" : "waiting_name",
    });

    await ctx.reply(
      lang === "uz"
        ? profile.name
          ? "Telefon raqamingizni +998901234567 formatida kiriting:"
          : "Ismingizni yozing:"
        : profile.name
        ? "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998901234567:"
        : "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:",
      profile.name
        ? Markup.keyboard([
            [
              Markup.button.contactRequest(
                lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
              ),
            ],
            [Markup.button.text("+998901234567")], // –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
          ])
            .resize()
            .oneTime()
        : Markup.removeKeyboard()
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞ –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on("contact", async (ctx) => {
  try {
    const state = userStates.get(ctx.from.id);
    if (!state || state.step !== "waiting_phone") return;

    const profile = userProfiles.get(ctx.from.id);
    profile.phone = ctx.message.contact.phone_number;
    userProfiles.set(ctx.from.id, profile);
    userStates.set(ctx.from.id, { step: "waiting_question" });

    await ctx.reply(
      profile.lang === "uz" ? "Savolingizni yozing:" : "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
      Markup.removeKeyboard()
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
bot.on("text", async (ctx) => {
  try {
    const userId = ctx.from.id;
    const text = ctx.message.text.trim();
    const state = userStates.get(userId);
    let profile = userProfiles.get(userId) || { questions: [], lang: "uz" };
    const lang = profile.lang;

    // –û—Ç–≤–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å")
    if (pendingReplies.has(userId)) {
      const { targetUserId, questionIndex } = pendingReplies.get(userId);
      const targetProfile = userProfiles.get(targetUserId);

      if (!targetProfile || !targetProfile.questions[questionIndex]) {
        await ctx.reply("‚ùó –í–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        pendingReplies.delete(userId);
        return;
      }

      const question = targetProfile.questions[questionIndex];
      question.chat = question.chat || [];
      question.chat.push({ type: "answer", text, timestamp: formatDate() });
      question.answered = !hasUnansweredQuestions(question.chat);
      userProfiles.set(targetUserId, targetProfile);

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
      await ctx.telegram.sendMessage(targetUserId, text);

      // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      await duplicateAdminCard(ctx, targetUserId, questionIndex);

      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
      const sentMsg = await ctx.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
      await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id);

      // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
      await autoDeleteMessage(ctx, ctx.chat.id, ctx.message.message_id);

      pendingReplies.delete(userId);
      return;
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞
    if (ctx.chat.id === ADMIN_CHAT_ID && !pendingReplies.has(userId)) {
      await autoDeleteMessage(ctx, ctx.chat.id, ctx.message.message_id);
      return;
    }

    if (!state) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (state.step === "waiting_name") {
      profile.name = text;
      userProfiles.set(userId, profile);
      userStates.set(userId, { step: "waiting_phone" });

      await ctx.reply(
        lang === "uz"
          ? "Telefon raqamingizni yuboring:"
          : "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        Markup.keyboard([
          [
            Markup.button.contactRequest(
              lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
            ),
          ],
        ])
          .resize()
          .oneTime()
      );
    } else if (state.step === "waiting_phone" && /^\+998\d{9}$/.test(text)) {
      profile.phone = text;
      userProfiles.set(userId, profile);
      userStates.set(userId, { step: "waiting_question" });

      await ctx.reply(
        lang === "uz" ? "Savolingizni yozing:" : "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
        Markup.removeKeyboard()
      );
    } else if (state.step === "waiting_phone") {
      await ctx.reply(
        lang === "uz"
          ? "Iltimos, telefon raqamingizni +998901234567 formatida kiriting:"
          : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998901234567:",
        Markup.keyboard([
          [
            Markup.button.contactRequest(
              lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"
            ),
          ],
          [Markup.button.text("+998901234567")], // –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
        ])
          .resize()
          .oneTime()
      );
    } else if (state.step === "waiting_question" && text) {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
      if (!profile.questions.length) {
        profile.questions.push({
          chat: [{ type: "question", text, timestamp: formatDate() }],
          answered: false,
          adminMsgId: null,
        });
      } else {
        profile.questions[0].chat = profile.questions[0].chat || [];
        profile.questions[0].chat.push({
          type: "question",
          text,
          timestamp: formatDate(),
        });
        profile.questions[0].answered = false; // –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–µ–ª–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º
      }
      userProfiles.set(userId, profile);

      await duplicateAdminCard(ctx, userId, 0);

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
      const sentMsg = await ctx.reply(
        lang === "uz"
          ? "‚úÖ Savol qabul qilindi. Tez orada javob beramiz."
          : "‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º."
      );
      await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id);
    } else {
      await ctx.reply(
        lang === "uz"
          ? "Iltimos, to‚Äòg‚Äòri ma'lumot kiriting."
          : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
      );
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${ctx.from.id}:`, error);
    await ctx.reply(
      profile.lang === "uz"
        ? "‚ùå Xatolik yuz berdi. Qaytadan urinib ko‚Äòring."
        : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
function hasUnansweredQuestions(chat) {
  if (!chat || chat.length === 0) return false;
  for (let i = chat.length - 1; i >= 0; i--) {
    if (chat[i].type === "question") return true;
    if (chat[i].type === "answer") return false;
  }
  return false;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on("callback_query", async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    if (!data.startsWith("reply_")) {
      await ctx.answerCbQuery("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
      return;
    }

    const [_, userId, questionIndex] = data.split("_");
    const targetUserId = Number(userId);
    const questionIndexNum = Number(questionIndex);
    const profile = userProfiles.get(targetUserId);

    if (!profile || !profile.questions[questionIndexNum]) {
      await ctx.answerCbQuery("‚ùó –í–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    pendingReplies.set(ctx.from.id, {
      targetUserId,
      questionIndex: questionIndexNum,
    });

    await ctx.answerCbQuery();
    const sentMsg = await ctx.reply("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:");
    await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ callback_query –æ—Ç ${ctx.from.id}:`, error);
    await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
  }
});

async function showUnansweredCount(ctx) {
  let count = 0;
  for (const profile of userProfiles.values()) {
    for (const question of profile.questions) {
      if (!question.answered) count++;
    }
  }
  await ctx.reply(`üî¥ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${count}`);
}

// –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–¥–º–∏–Ω–∞
async function duplicateAdminCard(ctx, userId, questionIndex) {
  try {
    const profile = userProfiles.get(userId);
    const question = profile.questions[questionIndex];

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const chatText = (question.chat || [])
      .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))
      .slice(-10)
      .map((item) => {
        const prefix = item.type === "question" ? "üë®‚Äçü¶∞" : "ü§ñ";
        const text = item.text;
        return `<i>${item.timestamp}</i>\n${prefix} ${text}\n---`;
      })
      .join("\n");

    const status = question.answered ? "üü¢ –û—Ç–≤–µ—á–µ–Ω–æ" : "üî¥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞";
    const statusEmoji = question.answered ? "üü¢" : "üî¥";
    const lastUpdated = formatDate();

    const groupMessage = `
<b>üì© Savol / –í–æ–ø—Ä–æ—Å #${questionIndex + 1}</b>

<b>üßë –ò–º—è:</b> ${profile.name}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> ${profile.phone}
<b>üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> ${lastUpdated}
<b>üìä –°—Ç–∞—Ç—É—Å:</b> ${status}

<b>üí¨ –ß–∞—Ç:</b>
${chatText || "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"}

#USER${userId}
    `;

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    if (question.adminMsgId) {
      try {
        await ctx.telegram.deleteMessage(ADMIN_CHAT_ID, question.adminMsgId);
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${question.adminMsgId}:`,
          error
        );
      }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    const sent = await ctx.telegram.sendMessage(ADMIN_CHAT_ID, groupMessage, {
      parse_mode: "HTML",
      reply_markup: Markup.inlineKeyboard([
        Markup.button.callback(
          profile.lang === "uz"
            ? `üì© Javob berish ${statusEmoji}`
            : `üì© –û—Ç–≤–µ—Ç–∏—Ç—å ${statusEmoji}`,
          `reply_${userId}_${questionIndex}`
        ),
      ]).reply_markup,
    });

    question.adminMsgId = sent.message_id;
    userProfiles.set(userId, profile);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è ${userId}:`, error);
  }
}

bot.command("unanswered", async (ctx) => {
  if (ctx.chat.id !== ADMIN_CHAT_ID) return;
  await showUnansweredCount(ctx);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"));
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
