const { Telegraf, Markup } = require("telegraf");
const path = require("path");

const bot = new Telegraf("8147782034:AAEeS1tXZxeR919ZECGl9aEI0-AOlQrTlM4");
const ADMIN_CHAT_ID = -4742476473;

const userStates = new Map();
const userProfiles = new Map();
const pendingReplies = new Map();

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
const formatDate = () =>
  new Date().toLocaleString("ru-RU", { timeZone: "Asia/Tashkent" });

// –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
const autoDeleteMessage = async (ctx, chatId, messageId, delay = 10000) => {
  try {
    setTimeout(() => {
      ctx.telegram.deleteMessage(chatId, messageId).catch((error) => {
        console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, error);
      });
    }, delay);
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`,
      error
    );
  }
};

// /start
bot.start(async (ctx) => {
  try {
    userStates.set(ctx.from.id, { step: "language" });

    const images = [
      "1.png",
      "2.png",
      "3.png",
      "4.png",
      "5.png",
      "6.jpg",
      "7.jpg",
    ];
    for (const image of images) {
      await ctx.replyWithPhoto(
        { source: path.join(__dirname, image) },
        { disable_notification: true }
      );
    }

    await ctx.replyWithDocument({
      source: path.join(__dirname, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è Smart Dunyo Pay.pdf"),
      filename: "Smart Dunyo Pay - Yo‚Äòriqnoma.pdf",
    });

    await ctx.reply(
      "Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
      Markup.keyboard([["üá∫üáø O'zbek tili", "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"]]).resize()
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ /start –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
});

// –í—ã–±–æ—Ä —è–∑—ã–∫–∞
bot.hears(["üá∫üáø O'zbek tili", "üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"], async (ctx) => {
  try {
    const lang = ctx.message.text.includes("O'zbek") ? "uz" : "ru";
    const profile = userProfiles.get(ctx.from.id) || { questions: [], lang };

    userProfiles.set(ctx.from.id, profile);
    userStates.set(ctx.from.id, {
      step: profile.name ? "waiting_phone" : "waiting_name",
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    if (lang === "uz") {
      await ctx.reply(`
“≤—É—Ä–º–∞—Ç–ª–∏ –∫–æ–ª–æ–Ω–∏—è–¥–∞–≥–∏ –∂–∞–∑–æ–Ω–∏ —É—Ç–∞—ë—Ç–≥–∞–Ω–ª–∞—Ä–Ω–∏–Ω–≥ —è“õ–∏–Ω–ª–∞—Ä–∏ –æ—Ç–∞-–æ–Ω–∞–ª–∞—Ä–∏ –≤–∞ —è“õ–∏–Ω “õ–∞—Ä–∏–Ω–¥–æ—à–ª–∞—Ä–∏!

–ë–∏–∑ —Å–∏–∑ —É—á—É–Ω —è“õ–∏–Ω–ª–∞—Ä–∏–Ω–≥–∏–∑ –±–∏–ª–∞–Ω –∞–ª–æ“õ–∞ “õ–∏–ª–∏–±, —É–ª–∞—Ä–≥–∞ “ì–∞–º—Ö—û—Ä–ª–∏–∫ “õ–∏–ª–∏—à “õ–∞–Ω—á–∞–ª–∏–∫ –º—É“≥–∏–º —ç–∫–∞–Ω–ª–∏–≥–∏–Ω–∏ —è—Ö—à–∏ –±–∏–ª–∞–º–∏–∑.
–≠–Ω–¥–∏–ª–∏–∫–¥–∞ –±—É –∂–∞—Ä–∞—ë–Ω —è–Ω–∞–¥–∞ –æ—Å–æ–Ω, —Ç–µ–∑ –≤–∞ “õ—É–ª–∞–π –±—û–ª–¥–∏!

"OLTIN ASR DBT" IT-–∫–æ–º–ø–∞–Ω–∏—è—Å–∏ "Uzum Bank" –±–∏–ª–∞–Ω “≥–∞–º–∫–æ—Ä–ª–∏–∫–¥–∞ –∫–æ–ª–æ–Ω–∏—è–ª–∞—Ä–¥–∞–≥–∏ “≥–∏—Å–æ–± —Ä–∞“õ–∞–º–ª–∞—Ä–≥–∞ –º–æ–±–∏–ª –∏–ª–æ–≤–∞–ª–∞—Ä –æ—Ä“õ–∞–ª–∏ –ø—É–ª —û—Ç–∫–∞–∑–∏—à–Ω–∏–Ω–≥ —è–Ω–≥–∏, –∏—à–æ–Ω—á–ª–∏ –≤–∞ “õ—É–ª–∞–π —É—Å—É–ª–∏–Ω–∏ —Ç–∞“õ–¥–∏–º —ç—Ç–∞–¥–∏.

"Smart Dunyo Pay" —Ö–∏–∑–º–∞—Ç–∏ ‚Äî –±—É:

üîπ –ú–∞“≥–∫—É–º–ª–∞—Ä —É—á—É–Ω –±–∏—Ä–∏–Ω—á–∏ –Ω–∞–≤–±–∞—Ç–¥–∞–≥–∏ —ç“≥—Ç–∏—ë–∂ –º–æ–ª–ª–∞—Ä–∏–Ω–∏ —Ö–∞—Ä–∏–¥ “õ–∏–ª–∏—à —É—á—É–Ω –º–∞–±–ª–∞“ì–ª–∞—Ä–Ω–∏ –±–∏—Ä –∑—É–º–¥–∞ “≥–∏—Å–æ–± —Ä–∞“õ–∞–º–∏–≥–∞ —û—Ç–∫–∞–∑–∏—à
üîπ “ö—É–ª–∞–π–ª–∏–∫ –≤–∞ —Å–æ–¥–¥–∞–ª–∏–∫ ‚Äî –±–∞—Ä—á–∞—Å–∏ Uzum Bank –º–æ–±–∏–ª –∏–ª–æ–≤–∞—Å–∏ –æ—Ä“õ–∞–ª–∏
üîπ –í–∞“õ—Ç–Ω–∏ —Ç–µ–∂–∞—à ‚Äî –±–∞–Ω–∫–ª–∞—Ä–¥–∞ –Ω–∞–≤–±–∞—Ç–¥–∞ —Ç—É—Ä–∏—à –≤–∞ –∞–≤—Ç–æ–±—É—Å–¥–∞ —é—Ä–∏—à—Å–∏–∑
üîπ 24/7 “õ—û–ª–ª–∞–±-“õ—É–≤–≤–∞—Ç–ª–∞—à ‚Äî –±–∏–∑ “≥–∞—Ä –¥–æ–∏–º —ë–Ω–∏–Ω–≥–∏–∑–¥–∞–º–∏–∑

üëâ Xizmatdan foydalanish bo‚Äòyicha to‚Äòliq yo‚Äòriqnomani Telegram-bot orqali olishingiz mumkin: @smartdunyopaybot (https://t.me/smartdunyopaybot)

‚òéÔ∏è –®—É–Ω–∏–Ω–≥–¥–µ–∫, –±–∞—Ä—á–∞ —Å–∞–≤–æ–ª–ª–∞—Ä –±—û–π–∏—á–∞ –∫—É–Ω—É —Ç—É–Ω –∏—à–ª–∞–π–¥–∏–≥–∞–Ω –∫–æ–ª–ª-–º–∞—Ä–∫–∞–∑–∏–º–∏–∑–≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω: +998 71 200 93 33

–ë–∏–∑ —è“õ–∏–Ω–ª–∞—Ä–∏–Ω–≥–∏–∑–Ω–∏–Ω–≥ “≥–∞—ë—Ç–∏–Ω–∏ –µ–Ω–≥–∏–ª–ª–∞—à—Ç–∏—Ä–∏—à–¥–∞ —Å–∏–∑–Ω–∏–Ω–≥ —ë—Ä–¥–∞–º–∏–Ω–≥–∏–∑ –±–µ“õ–∏—ë—Å —ç–∫–∞–Ω–∏–≥–∞ –∏—à–æ–Ω–∞–º–∏–∑. –ë–∏–∑ —ç—Å–∞, —û–∑ –Ω–∞–≤–±–∞—Ç–∏–¥–∞, —Å–∏–∑ –≤–∞ —è“õ–∏–Ω–ª–∞—Ä–∏–Ω–≥–∏–∑ —ù—Ä—Ç–∞—Å–∏–¥–∞–≥–∏ –∞–ª–æ“õ–∞–Ω–∏ —è–Ω–∞–¥–∞ –∏–ª–∏“õ –≤–∞ —Ç–µ–∑–∫–æ—Ä “õ–∏–ª–∏—à —É—á—É–Ω —è–Ω–≥–∏ –¥–∞—Å—Ç—É—Ä–∏–π –µ—á–∏–º–ª–∞—Ä —É—Å—Ç–∏–¥–∞ –∏—à–ª–∞–º–æ“õ–¥–∞–º–∏–∑.

–°–∏–∑–¥–∞–Ω –∏–ª—Ç–∏–º–æ—Å “õ–∏–ª–∞–º–∏–∑, —É—à–±—É —Ö–∞–±–∞—Ä–Ω–∏ –±–æ—à“õ–∞ –∫–æ–ª–æ–Ω–∏—è–ª–∞—Ä–¥–∞–≥–∏ –º–∞“≥–∫—É–º–ª–∞—Ä–Ω–∏–Ω–≥ —è“õ–∏–Ω–ª–∞—Ä–∏–≥–∞ –æ–∏–¥ –¢–µ–ª–µ–≥—Ä–∞–º –≥—É—Ä—É“≥–ª–∞—Ä–≥–∞ “≥–∞–º —é–±–æ—Ä–∏–Ω–≥, —à—É–Ω–¥–∞ –∏–ª–æ–∂–∏ –±–æ—Ä–∏—á–∞ –∫—û–ø—Ä–æ“õ –∏–Ω—Å–æ–Ω —É—à–±—É —Ö–∏–∑–º–∞—Ç–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏—à–∏ –º—É–º–∫–∏–Ω –±—û–ª–∞–¥–∏.

–ú–µ“≥—Ä –≤–∞ “ì–∞–º—Ö—û—Ä–ª–∏–∫ –±–∏–ª–∞–Ω,
"Smart Dunyo" –∂–∞–º–æ–∞—Å–∏
      `);
    } else {
      await ctx.reply(`
–£–≤–∞–∂–∞–µ–º—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ –∏ –±–ª–∏–∑–∫–∏–µ —Ç–µ—Ö, –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏—Å–ø—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö!
–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, –∫–∞–∫ –≤–∞–∂–Ω–æ –¥–ª—è –≤–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤—è–∑—å –∏ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–≤–æ–∏—Ö —Ä–æ–¥–Ω—ã—Ö, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ –∫–æ–ª–æ–Ω–∏–∏.
–¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å—Ç–∞–ª–æ –ø—Ä–æ—â–µ, –±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ!

IT-–∫–æ–º–ø–∞–Ω–∏—è "OLTIN ASR DBT" —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å "Uzum Bank" –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π, –Ω–∞–¥—ë–∂–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–∞ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–∏–π —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

–°–µ—Ä–≤–∏—Å "Smart Dunyo Pay" ‚Äî —ç—Ç–æ:

üîπ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç –∑–∞–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–µ—Ä–≤–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
üîπ –£–¥–æ–±—Å—Ç–≤–æ –∏ –ø—Ä–æ—Å—Ç–æ—Ç–∞ ‚Äî –≤—Å—ë —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Uzum Bank
üîπ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π –≤ –±–∞–Ω–∫–µ –∏ –ø–æ–µ–∑–¥–æ–∫ –≤ –∞–≤—Ç–æ–±—É—Å–∞—Ö
üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º

üëâ –ü–æ–ª–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç: @smartdunyopaybot (https://t.me/smartdunyopaybot)

‚òéÔ∏è –ê —Ç–∞–∫–∂–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–º –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–µ: +998 71 200 93 33

–ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ –≤–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–µ–ª–∞–µ—Ç –∂–∏–∑–Ω—å –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö –ª–µ–≥—á–µ.
–ê –º—ã, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –¥–ª—è –µ—â—ë –±–æ–ª–µ–µ —Ç—ë–ø–ª–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É –≤–∞–º–∏ –∏ —Ç–µ–º–∏, –∫—Ç–æ —Å–µ–π—á–∞—Å –æ—Å–æ–±–µ–Ω–Ω–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º.

–ü—Ä–æ—Å–∏–º –í–∞—Å —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–æ–Ω–∏–π, —á—Ç–æ–±—ã –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ª—é–¥–µ–π –º–æ–≥–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —É—Å–ª—É–≥–æ–π.

–° –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π,
–ö–æ–º–∞–Ω–¥–∞ "Smart Dunyo"
      `);
    }

    await ctx.reply(
      lang === "uz"
        ? profile.name
          ? "Telefon raqamingizni yuboring:"
          : "Ismingizni yozing:"
        : profile.name
        ? "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        : "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:",
      profile.name
        ? Markup.inlineKeyboard([
            Markup.button.contactRequest(
              lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
              true
            ),
          ])
        : Markup.removeKeyboard()
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞ –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply(
      lang === "uz"
        ? "‚ùå Xatolik yuz berdi. Qaytadan urinib ko‚Äòring."
        : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on("contact", async (ctx) => {
  try {
    const state = userStates.get(ctx.from.id);
    if (!state || state.step !== "waiting_phone") return;

    const profile = userProfiles.get(ctx.from.id);
    profile.phone = ctx.message.contact.phone_number;
    userProfiles.set(ctx.from.id, profile);
    userStates.set(ctx.from.id, { step: "waiting_question" });

    await ctx.reply(
      profile.lang === "uz"
        ? "Savolingizni yozing yoki fayl yuboring:"
        : "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:",
      Markup.removeKeyboard()
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è ${ctx.from.id}:`, error);
    await ctx.reply(
      profile.lang === "uz"
        ? "‚ùå Xatolik yuz berdi. Qaytadan urinib ko‚Äòring."
        : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
bot.on("text", async (ctx) => {
  try {
    const userId = ctx.from.id;
    const text = ctx.message.text.trim();
    const state = userStates.get(userId);
    let profile = userProfiles.get(userId) || { questions: [], lang: "uz" };
    const lang = profile.lang || "uz";

    // –û—Ç–≤–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã
    if (pendingReplies.has(userId)) {
      const { targetUserId, questionIndex } = pendingReplies.get(userId);
      const targetProfile = userProfiles.get(targetUserId);

      if (!targetProfile || !targetProfile.questions[questionIndex]) {
        await ctx.reply("‚ùó –í–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        pendingReplies.delete(userId);
        return;
      }

      const question = targetProfile.questions[questionIndex];
      question.chat = question.chat || [];
      question.chat.push({
        type: "answer",
        contentType: "text",
        content: text,
        timestamp: formatDate(),
        message_id: ctx.message.message_id,
      });
      question.answered = !hasUnansweredQuestions(question.chat);
      userProfiles.set(targetUserId, targetProfile);

      await ctx.telegram.sendMessage(targetUserId, text);
      await sortAndUpdateCards(ctx);

      const sentMsg = await ctx.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
      await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
      await autoDeleteMessage(ctx, ctx.chat.id, ctx.message.message_id, 5000);

      pendingReplies.delete(userId);
      return;
    }

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ
    if (Number(ctx.chat.id) === ADMIN_CHAT_ID && !pendingReplies.has(userId)) {
      if (!text.startsWith("/")) {
        await autoDeleteMessage(ctx, ctx.chat.id, ctx.message.message_id);
        return;
      }
      return;
    }

    if (!state) return;

    if (state.step === "waiting_name") {
      profile.name = text;
      profile.lang = lang;
      userProfiles.set(userId, profile);
      userStates.set(userId, { step: "waiting_phone" });

      await ctx.reply(
        lang === "uz"
          ? "Telefon raqamingizni yuboring:"
          : "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        {
          reply_markup: Markup.inlineKeyboard([
            Markup.button.contactRequest(
              lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
              true
            ),
          ]).reply_markup,
        }
      );
    } else if (state.step === "waiting_phone") {
      await ctx.reply(
        lang === "uz"
          ? "Iltimos, telefon raqamingizni faqat tugma orqali yuboring:"
          : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É:",
        {
          reply_markup: Markup.inlineKeyboard([
            Markup.button.contactRequest(
              lang === "uz" ? "üì± Raqamni yuborish" : "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
              true
            ),
          ]).reply_markup,
        }
      );
      console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è userId ${userId} —Å —Ç–µ–∫—Å—Ç–æ–º: ${text}`);
    } else if (state.step === "waiting_question" && text) {
      if (!profile.questions.length) {
        profile.questions.push({
          chat: [
            {
              type: "question",
              contentType: "text",
              content: text,
              timestamp: formatDate(),
              message_id: ctx.message.message_id,
            },
          ],
          answered: false,
          adminMsgId: null,
        });
      } else {
        profile.questions[0].chat = profile.questions[0].chat || [];
        profile.questions[0].chat.push({
          type: "question",
          contentType: "text",
          content: text,
          timestamp: formatDate(),
          message_id: ctx.message.message_id,
        });
        profile.questions[0].answered = false;
      }
      userProfiles.set(userId, profile);

      await sortAndUpdateCards(ctx);

      const sentMsg = await ctx.reply(
        lang === "uz"
          ? "‚úÖ Savol qabul qilindi. Tez orada javob beramiz."
          : "‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º."
      );
      await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
    } else {
      await ctx.reply(
        lang === "uz"
          ? "Iltimos, to‚Äòg‚Äòri ma'lumot kiriting."
          : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
      );
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${ctx.from.id}:`, error);
    await ctx.reply(
      profile.lang === "uz"
        ? "‚ùå Xatolik yuz berdi. Qaytadan urinib ko‚Äòring."
        : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
bot.on(
  ["photo", "video", "document", "audio", "voice", "sticker", "animation"],
  async (ctx) => {
    try {
      const userId = ctx.from.id;
      const state = userStates.get(userId);
      let profile = userProfiles.get(userId) || { questions: [], lang: "uz" };
      const lang = profile.lang || "uz";

      if (pendingReplies.has(userId)) {
        const { targetUserId, questionIndex } = pendingReplies.get(userId);
        const targetProfile = userProfiles.get(targetUserId);

        if (!targetProfile || !targetProfile.questions[questionIndex]) {
          await ctx.reply("‚ùó –í–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
          pendingReplies.delete(userId);
          return;
        }

        const question = targetProfile.questions[questionIndex];
        question.chat = question.chat || [];

        let contentType = ctx.message.photo
          ? "photo"
          : ctx.message.video
          ? "video"
          : ctx.message.document
          ? "document"
          : ctx.message.audio
          ? "audio"
          : ctx.message.voice
          ? "voice"
          : ctx.message.sticker
          ? "sticker"
          : ctx.message.animation
          ? "animation"
          : "unknown";
        let content =
          ctx.message[contentType]?.file_id ||
          ctx.message[contentType]?.[ctx.message[contentType].length - 1]
            ?.file_id;

        question.chat.push({
          type: "answer",
          contentType,
          content,
          timestamp: formatDate(),
          caption: ctx.message.caption || "",
          message_id: ctx.message.message_id,
        });
        question.answered = !hasUnansweredQuestions(question.chat);
        userProfiles.set(targetUserId, targetProfile);

        await ctx.telegram.copyMessage(
          targetUserId,
          ctx.chat.id,
          ctx.message.message_id
        );
        await sortAndUpdateCards(ctx);

        const sentMsg = await ctx.reply("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
        await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
        await autoDeleteMessage(ctx, ctx.chat.id, ctx.message.message_id, 5000);

        pendingReplies.delete(userId);
        return;
      }

      if (Number(ctx.chat.id) === ADMIN_CHAT_ID) {
        await autoDeleteMessage(ctx, ctx.chat.id, ctx.message.message_id);
        return;
      }

      if (!state || state.step !== "waiting_question") return;

      let contentType = ctx.message.photo
        ? "photo"
        : ctx.message.video
        ? "video"
        : ctx.message.document
        ? "document"
        : ctx.message.audio
        ? "audio"
        : ctx.message.voice
        ? "voice"
        : ctx.message.sticker
        ? "sticker"
        : ctx.message.animation
        ? "animation"
        : "unknown";
      let content =
        ctx.message[contentType]?.file_id ||
        ctx.message[contentType]?.[ctx.message[contentType].length - 1]
          ?.file_id;

      if (!profile.questions.length) {
        profile.questions.push({
          chat: [
            {
              type: "question",
              contentType,
              content,
              timestamp: formatDate(),
              caption: ctx.message.caption || "",
              message_id: ctx.message.message_id,
            },
          ],
          answered: false,
          adminMsgId: null,
        });
      } else {
        profile.questions[0].chat = profile.questions[0].chat || [];
        profile.questions[0].chat.push({
          type: "question",
          contentType,
          content,
          timestamp: formatDate(),
          caption: ctx.message.caption || "",
          message_id: ctx.message.message_id,
        });
        profile.questions[0].answered = false;
      }
      userProfiles.set(userId, profile);

      await sortAndUpdateCards(ctx);

      const sentMsg = await ctx.reply(
        lang === "uz"
          ? "‚úÖ Fayl qabul qilindi. Tez orada javob beramiz."
          : "‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –°–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º."
      );
      await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –æ—Ç ${ctx.from.id}:`, error);
      await ctx.reply(
        profile?.lang === "uz"
          ? "‚ùå Xatolik yuz berdi. Qaytadan urinib ko‚Äòring."
          : "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
    }
  }
);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
function hasUnansweredQuestions(chat) {
  if (!chat || chat.length === 0) return false;
  for (let i = chat.length - 1; i >= 0; i--) {
    if (chat[i].type === "question") return true;
    if (chat[i].type === "answer") return false;
  }
  return false;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on("callback_query", async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    if (!data.startsWith("reply_")) {
      await ctx.answerCbQuery("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
      return;
    }

    const [_, userId, questionIndex] = data.split("_");
    const targetUserId = Number(userId);
    const questionIndexNum = Number(questionIndex);
    const profile = userProfiles.get(targetUserId);

    if (!profile || !profile.questions[questionIndexNum]) {
      await ctx.answerCbQuery("‚ùó –í–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    pendingReplies.set(ctx.from.id, {
      targetUserId,
      questionIndex: questionIndexNum,
    });

    await ctx.answerCbQuery();
    const sentMsg = await ctx.reply(
      "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:"
    );
    await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ callback_query –æ—Ç ${ctx.from.id}:`, error);
    await ctx.answerCbQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /unanswered
bot.command("unanswered", async (ctx) => {
  try {
    if (Number(ctx.chat.id) !== ADMIN_CHAT_ID) {
      const sentMsg = await ctx.reply(
        "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
      );
      await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
      await autoDeleteMessage(ctx, ctx.chat.id, ctx.message.message_id, 5000);
      return;
    }

    let count = 0;
    for (const profile of userProfiles.values()) {
      for (const question of profile.questions) {
        if (!question.answered) count++;
      }
    }
    const message =
      count > 0
        ? `üî¥ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${count}`
        : "‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã!";
    const sentMsg = await ctx.reply(message);
    await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /unanswered:", error);
    const sentMsg = await ctx.reply(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
    );
    await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /sort
bot.command("sort", async (ctx) => {
  try {
    if (Number(ctx.chat.id) !== ADMIN_CHAT_ID) {
      const sentMsg = await ctx.reply(
        "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
      );
      await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
      await autoDeleteMessage(ctx, ctx.chat.id, ctx.message.message_id, 5000);
      return;
    }

    await sortAndUpdateCards(ctx);
    const sentMsg = await ctx.reply(
      "‚úÖ –í–æ–ø—Ä–æ—Å—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ (üü¢) —Å–≤–µ—Ä—Ö—É, –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ (üî¥) —Å–Ω–∏–∑—É."
    );
    await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /sort:", error);
    const sentMsg = await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤.");
    await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command("help", async (ctx) => {
  try {
    if (Number(ctx.chat.id) !== ADMIN_CHAT_ID) {
      const sentMsg = await ctx.reply(
        "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
      );
      await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
      await autoDeleteMessage(ctx, ctx.chat.id, ctx.message.message_id, 5000);
      return;
    }

    const helpMessage = `
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
‚Ä¢ /unanswered ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
‚Ä¢ /sort ‚Äî –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã: –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ (üü¢) —Å–≤–µ—Ä—Ö—É, –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ (üî¥) —Å–Ω–∏–∑—É.
‚Ä¢ /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
  `;
    const sentMsg = await ctx.reply(helpMessage);
    await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help:", error);
    const sentMsg = await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /help.");
    await autoDeleteMessage(ctx, ctx.chat.id, sentMsg.message_id, 5000);
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
// –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
async function createAdminCard(ctx, userId, questionIndex) {
  try {
    const profile = userProfiles.get(userId);
    const question = profile.questions[questionIndex];

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–∞—Ç–∞ —Å –º–µ–¥–∏–∞
    const chatText = (question.chat || [])
      .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))
      .slice(-10)
      .map(async (item) => {
        const prefix = item.type === "question" ? "üë®‚Äçü¶∞" : "ü§ñ";
        let content;
        let mediaMessage;

        switch (item.contentType) {
          case "text":
            content = item.content;
            break;
          case "photo":
            content = `üì∏ –§–æ—Ç–æ${item.caption ? `: ${item.caption}` : ""}`;
            mediaMessage = await ctx.telegram.sendPhoto(
              ADMIN_CHAT_ID,
              item.content,
              {
                caption: `${prefix} ${item.caption || "–§–æ—Ç–æ"} (${
                  item.timestamp
                })`,
              }
            );
            await autoDeleteMessage(
              ctx,
              ADMIN_CHAT_ID,
              mediaMessage.message_id,
              60000
            ); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
            break;
          case "video":
            content = `üìπ –í–∏–¥–µ–æ${item.caption ? `: ${item.caption}` : ""}`;
            mediaMessage = await ctx.telegram.sendVideo(
              ADMIN_CHAT_ID,
              item.content,
              {
                caption: `${prefix} ${item.caption || "–í–∏–¥–µ–æ"} (${
                  item.timestamp
                })`,
              }
            );
            await autoDeleteMessage(
              ctx,
              ADMIN_CHAT_ID,
              mediaMessage.message_id,
              60000
            );
            break;
          case "document":
            content = `üìÑ –î–æ–∫—É–º–µ–Ω—Ç${item.caption ? `: ${item.caption}` : ""}`;
            mediaMessage = await ctx.telegram.sendDocument(
              ADMIN_CHAT_ID,
              item.content,
              {
                caption: `${prefix} ${item.caption || "–î–æ–∫—É–º–µ–Ω—Ç"} (${
                  item.timestamp
                })`,
              }
            );
            await autoDeleteMessage(
              ctx,
              ADMIN_CHAT_ID,
              mediaMessage.message_id,
              60000
            );
            break;
          case "audio":
            content = `üéµ –ê—É–¥–∏–æ${item.caption ? `: ${item.caption}` : ""}`;
            mediaMessage = await ctx.telegram.sendAudio(
              ADMIN_CHAT_ID,
              item.content,
              {
                caption: `${prefix} ${item.caption || "–ê—É–¥–∏–æ"} (${
                  item.timestamp
                })`,
              }
            );
            await autoDeleteMessage(
              ctx,
              ADMIN_CHAT_ID,
              mediaMessage.message_id,
              60000
            );
            break;
          case "voice":
            content = `üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ${
              item.caption ? `: ${item.caption}` : ""
            }`;
            mediaMessage = await ctx.telegram.sendVoice(
              ADMIN_CHAT_ID,
              item.content,
              {
                caption: `${prefix} ${item.caption || "–ì–æ–ª–æ—Å–æ–≤–æ–µ"} (${
                  item.timestamp
                })`,
              }
            );
            await autoDeleteMessage(
              ctx,
              ADMIN_CHAT_ID,
              mediaMessage.message_id,
              60000
            );
            break;
          case "sticker":
            content = `üòÄ –°—Ç–∏–∫–µ—Ä`;
            mediaMessage = await ctx.telegram.sendSticker(
              ADMIN_CHAT_ID,
              item.content
            );
            await autoDeleteMessage(
              ctx,
              ADMIN_CHAT_ID,
              mediaMessage.message_id,
              60000
            );
            break;
          case "animation":
            content = `üéû –ê–Ω–∏–º–∞—Ü–∏—è${item.caption ? `: ${item.caption}` : ""}`;
            mediaMessage = await ctx.telegram.sendAnimation(
              ADMIN_CHAT_ID,
              item.content,
              {
                caption: `${prefix} ${item.caption || "–ê–Ω–∏–º–∞—Ü–∏—è"} (${
                  item.timestamp
                })`,
              }
            );
            await autoDeleteMessage(
              ctx,
              ADMIN_CHAT_ID,
              mediaMessage.message_id,
              60000
            );
            break;
          default:
            content = `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞`;
        }
        return `<i>${item.timestamp}</i>\n${prefix} ${content}\n---`;
      });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ –º–µ–¥–∏–∞
    const chatTextResolved = (await Promise.all(chatText)).join("\n");

    const status = question.answered ? "üü¢ –û—Ç–≤–µ—á–µ–Ω–æ" : "üî¥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞";
    const statusEmoji = question.answered ? "üü¢" : "üî¥";
    const lastUpdated = formatDate();

    const groupMessage = `
<b>üì© Savol / –í–æ–ø—Ä–æ—Å #${questionIndex + 1}</b>

<b>üßë –ò–º—è:</b> ${profile.name}
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> ${profile.phone}
<b>üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> ${lastUpdated}
<b>üìä –°—Ç–∞—Ç—É—Å:</b> ${status}

<b>üí¨ –ß–∞—Ç:</b>
${chatTextResolved || "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"}

#USER${userId}
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const sent = await ctx.telegram.sendMessage(ADMIN_CHAT_ID, groupMessage, {
      parse_mode: "HTML",
      reply_markup: Markup.inlineKeyboard([
        Markup.button.callback(
          profile.lang === "uz"
            ? `üì© Javob berish ${statusEmoji}`
            : `üì© –û—Ç–≤–µ—Ç–∏—Ç—å ${statusEmoji}`,
          `reply_${userId}_${questionIndex}`
        ),
      ]).reply_markup,
    });

    question.adminMsgId = sent.message_id;
    userProfiles.set(userId, profile);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è ${userId}:`, error);
  }
}
// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
async function sortAndUpdateCards(ctx) {
  try {
    console.log("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫");

    const allQuestions = [];
    for (const [userId, profile] of userProfiles.entries()) {
      profile.questions.forEach((question, index) => {
        allQuestions.push({
          userId,
          questionIndex: index,
          question,
          timestamp:
            question.chat[question.chat.length - 1]?.timestamp || formatDate(),
        });
      });
    }

    if (allQuestions.length === 0) {
      console.log("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏");
      return;
    }

    allQuestions.sort((a, b) => {
      if (a.question.answered !== b.question.answered) {
        return a.question.answered ? -1 : 1;
      }
      return new Date(b.timestamp) - new Date(a.timestamp);
    });

    for (const { userId, questionIndex } of allQuestions) {
      const profile = userProfiles.get(userId);
      const question = profile.questions[questionIndex];
      if (question.adminMsgId) {
        try {
          await ctx.telegram.deleteMessage(ADMIN_CHAT_ID, question.adminMsgId);
          question.adminMsgId = null;
          userProfiles.set(userId, profile);
        } catch (error) {
          console.error(
            `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ ${question.adminMsgId}:`,
            error
          );
        }
      }
    }

    for (const { userId, questionIndex } of allQuestions) {
      await createAdminCard(ctx, userId, questionIndex);
    }

    console.log("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ sortAndUpdateCards:", error);
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => console.log("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"));
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
